#!python
# -*- coding: utf-8 -*-
"""
Created on Wed Mar  9 11:47:21 2022

@author: marco
"""

import MDAnalysis as mda
import subprocess
import argparse
import MDAnalysis.analysis.leaflet
import numpy as np
import os
import shocker.src.cluster as cl
import shocker.src.file_mod as fm
import shocker.src.index_processing as ip
import shocker.src.vesicle_data as vd
import shocker.src.water_identifier as wi
from shocker.src.cluster import Cluster
from shocker.src.water_identifier import Identifier
from shocker.src.water_repositioning import Mover
from shocker.src.vesicle_data import VolArea
from shocker.src.vesicle_data import IonConcentration
from shocker import DATA_PATH

def main():
    
    parser = argparse.ArgumentParser(description='Osmotic shock simulator', add_help=True)
    parser.add_argument('-c','--name', help='name of the files')
    parser.add_argument('-p','--topology', help='topology file')
    parser.add_argument('-r','--removed', type=int, help='nr of removed particles per shock')
    parser.add_argument('-e','--end', type=int, help='nr of the last cycle')
    parser.add_argument('-b','--bins', type=float, default=1.0, help='bin size for clustering (standard size is 1nm^3)')
    parser.add_argument('-s','--start', type=int, default=0, help='define the starting cycle')
    parser.add_argument('-x','--xtc', type=int, default=0, help='frequency of storing position data (default = 0)')
    parser.add_argument('-n', '--index', help='index file containing membrane, solvent and possibly ions')
    parser.add_argument('-it', '--iterations', type=int, default=100000, help='the number of iterations per cycle')
    parser.add_argument('-sts', '--slow_timestep', type=int, default=0.0002, help='timestep of slow run')
    parser.add_argument('-its', '--iterations_slow', type=int, default=1000, help='the number of iterations per cycle')
    parser.add_argument('-pts', '--production_timestep', type=int, default=0.02, help='timestep of production run')
    parser.add_argument('-mdpmin', '--emruns', default='no', nargs='+', help='the .mdp files used for energy minimization')
    parser.add_argument('-emnr', '--enernr', type=int, default=1, help='number of energy minimization rounds per cycle')
    parser.add_argument('-vd', '--vesdata', default='no', help='whether or not leaflet area and vesicle volume is calculated and stored each cycle')
    parser.add_argument('-i', '--ions', default='no', help='whether or not ions are used')
    parser.add_argument('-cp', '--cloudpoints', default='GL1', help='defines which atoms are used to construct a triangulated surface of the vesicle')
    parser.add_argument('-shock', '--shocktype', default='hypertonic', help='type of osmotick shock (hypertonic or hypotonic)')
    parser.add_argument('-version', '--gromacs', default='gmx', help='version of the gromacs suite used to perform simulation')
    parser.add_argument('-mem', '--memname', default='membrane', help='name of the membrane index group')
    parser.add_argument('-water', '--water_name', default='water', help='name of the water index group')
    parser.add_argument('-ions', '--ions_name', default='ions', help='name of the ions index group')
    parser.add_argument('-st', '--steadystate', default='no', help='whether or not the shock sim is followed by steady state simulation')
    parser.add_argument('-nrst', '--nr_steadystate', type=int, default=5000000, help='length of steady state simulation')
    parser.add_argument('-aa', '--all_atom', default='no', help='is the simulation Martini coarse grained or all-atom?')
    parser.add_argument('-oxy', '--oxygen_pos', type=int, default=0, help='position of the oxygen atom relative to the hydrogens (0, 1 or 2)')
    args = parser.parse_args()
    
    data_path = DATA_PATH
    
    # =========================================================================
    # Creating the universe and initial gro file
    # =========================================================================
    
    gro_file_original = args.name
    copy_command= 'cp {} osmotic_shock.gro'.format(gro_file_original)
    subprocess.call(copy_command, shell=True)
    gro_file = 'osmotic_shock.gro'
    
    u = mda.Universe(gro_file)
        
    # =========================================================================
    # Defining and modifying mdp files
    # =========================================================================
    
    mdp_file_path = os.path.join(data_path, 'martini_md_anis.mdp')
    mdp_file2_path = os.path.join(data_path, 'martini_md_anis_slow.mdp')
    copy_command_mdp = 'cp {} martini_md_anis.mdp'.format(mdp_file_path)
    copy_command_mdp2 = 'cp {} martini_md_anis_slow.mdp'.format(mdp_file2_path)
    subprocess.call(copy_command_mdp, shell=True)
    subprocess.call(copy_command_mdp2, shell=True)
    mdp_file = 'martini_md_anis.mdp'
    mdp_file2 = 'martini_md_anis_slow.mdp'
    fm.mdp_value_changer(mdp_file, 'new.mdp', 'nsteps', args.iterations)
    fm.mdp_value_changer(mdp_file2, 'new.mdp', 'nsteps', args.iterations_slow)
    fm.mdp_value_changer(mdp_file, 'new.mdp', 'nstxout-compressed', args.xtc)
    group_names = ip.ag_extractor(u, args.index)[1]
    name_string = ip.name_concatenator(group_names)
    fm.mdp_value_changer(mdp_file, 'new.mdp', 'tc-grps', name_string)
    fm.mdp_value_changer(mdp_file2, 'new.mdp', 'tc-grps', name_string)
    taut = '1.0 '*len(group_names)
    reft = '310 '*len(group_names)
    fm.mdp_value_changer(mdp_file, 'new.mdp', 'tau_t', taut)
    fm.mdp_value_changer(mdp_file2, 'new.mdp', 'tau_t', taut)
    fm.mdp_value_changer(mdp_file, 'new.mdp', 'ref_t', reft)
    fm.mdp_value_changer(mdp_file2, 'new.mdp', 'ref_t', reft)
    fm.mdp_value_changer(mdp_file, 'new.mdp', 'dt', args.production_timestep)
    fm.mdp_value_changer(mdp_file2, 'new.mdp', 'dt', args.slow_timestep)
    
    # creating a destination folder to store all generated files
    subprocess.call('mkdir shockfiles', shell=True)

    # =========================================================================    
    # Starting the pumping cycles
    # =========================================================================
    
    for shock in range(args.start, args.end):
        
        placement_check = 1
        backup_pos = u.select_atoms('all').positions
        
        while placement_check == 1:
            
            # =====================================================================
            # Collecting data for water relocation
            # =====================================================================
                  
            all_atoms = u.select_atoms('all')
            all_atoms_pos = all_atoms.positions
            atom_groups = ip.ag_extractor(all_atoms, args.index)
            water = ip.ag_finder(args.water_name, atom_groups)
            water_pos = water.positions
            membrane = ip.ag_finder(args.memname, atom_groups)
            membrane_pos = membrane.positions
            tj = u.trajectory[0]
            box_dimensions = tj.dimensions
            bin_size_a = args.bins*10
                        
            # =====================================================================
            # Clustering water particles in both compartements
            # =====================================================================
            
            cluster_box = Cluster(all_atoms, box_dimensions, bin_size_a)
                  
            lipid_bins = cluster_box.bin_converter_l(membrane_pos)
            lipid_bins_single = cl.multiples_remover(lipid_bins)
    
            bin_system = cluster_box.bin_system_maker(lipid_bins_single)
            bin_clusters = cluster_box.cluster_finder(bin_system)
            
            # =====================================================================
            # Identifying water particles to reposition 
            # =====================================================================
            
            identify = Identifier(bin_clusters, box_dimensions, bin_size_a, args.removed, water)
            
            water_clusters = identify.cluster_selecter()
            inner_cluster = water_clusters[0]
            outer_cluster = water_clusters[1]
            np.random.shuffle(inner_cluster)
            water_bins = identify.bin_converter_w(water_pos)
            all_bins = identify.bin_converter_w(all_atoms_pos)
            
            if args.all_atom == 'no':
                if args.shocktype == 'hypertonic':
                    remove_water = identify.index_finder_m(water_bins, inner_cluster)
                else:
                    remove_water = identify.index_finder_m(water_bins, outer_cluster)
            else:    
                if args.shocktype == 'hypertonic':
                    remove_water = identify.index_finder_m_aa(water_bins, inner_cluster, args.oxygen_pos)
                else:
                    remove_water = identify.index_finder_m_aa(water_bins, outer_cluster, args.oxygen_pos)
                    
                
            # =====================================================================
            # Calculating new positions for water particles 
            # =====================================================================
            
            if args.shocktype == 'hypertonic':
                            
                file_collection = Mover(outer_cluster, all_atoms, bin_size_a, args.removed, box_dimensions, all_bins, water)
                repositioning_bins = file_collection.repositioning_bin_identifier()
                
                if args.all_atom == 'no':
                    new_positions = file_collection.position_generator(repositioning_bins)[0]
                    file_collection.water_repositioning_gro(remove_water, new_positions, gro_file)
                else:
                    new_positions = file_collection.position_generator_aa(repositioning_bins, args.oxygen_pos)[0]
                    file_collection.water_repositioning_gro_aa(remove_water, new_positions, gro_file, args.oxygen_pos)
                        
            else:
                file_collection = Mover(inner_cluster, all_atoms, bin_size_a, args.removed, box_dimensions, all_bins, water)
                repositioning_bins = file_collection.repositioning_bin_identifier()
                
                if args.all_atom == 'no':
                    new_positions = file_collection.position_generator(repositioning_bins)[0]
                    file_collection.water_repositioning_gro(remove_water, new_positions, gro_file)
                    
                else:
                    new_positions = file_collection.position_generator_aa(repositioning_bins, args.oxygen_pos)[0]
                    file_collection.water_repositioning_gro_aa(remove_water, new_positions, gro_file, args.oxygen_pos)
                    
            # =====================================================================
            # Data needed for relaxation run
            # =====================================================================
                  
            gro_file = 'osmotic_shock.gro'
            tpr_file = 'osmotic_shock.tpr'
            gro_file_1 = 'osmotic_shock1.gro'
            gro_file_2 = 'osmotic_shock2.gro'
            xtc_file = 'osmotic_shock.xtc'
            topology_file = args.topology
                    
            # =====================================================================
            # Performing energy minimization if needed
            # =====================================================================
            
            if args.emruns != 'no':
                for i in range(args.enernr):
                    for mdp in args.emruns:
                        
                        grompp_em = '{} grompp -f {} -c {} -p {} -maxwarn 1'
                        grompp_command_em = grompp_em.format(args.gromacs, mdp, gro_file, topology_file)
                        
                        mdrun_command_em = '{} mdrun -v'.format(args.gromacs)
                        em_name_change_command = 'mv confout.gro {}'.format(gro_file)
                        tpr_remove_command = 'rm topol.tpr'
                        
                        subprocess.call(grompp_command_em, shell=True)
                        subprocess.call(mdrun_command_em, shell=True)
                        subprocess.call(em_name_change_command, shell=True)
                        subprocess.call(tpr_remove_command, shell=True)
                        
            # =========================================================================
            # Executing the relaxation simulation 
            # =========================================================================
            
            restart_condition = 1
            
            while restart_condition > 0:
                
                grompp = '{} grompp -f {} -c {} -p {} -o {} -n {}'
                mdrun = '{} mdrun -s {} -v -x {} -c {}'
                
                grompp_command_slow = grompp.format(args.gromacs, mdp_file2, gro_file, topology_file, tpr_file, args.index)
                mdrun_command_slow = mdrun.format(args.gromacs, tpr_file, xtc_file, gro_file_1)
                subprocess.call(grompp_command_slow, shell=True)
                subprocess.call(mdrun_command_slow, shell=True)
                
                grompp_command = grompp.format(args.gromacs, mdp_file, gro_file_1, topology_file, tpr_file, args.index)
                mdrun_command = mdrun.format(args.gromacs, tpr_file, xtc_file, gro_file_2)
                subprocess.call(grompp_command, shell=True)
                subprocess.call(mdrun_command, shell=True)            
                
                # Checking if step files are generated, indicating system failure due to lincs warnings
                file_list = os.listdir()
                step_files = [fn for fn in file_list if 'step' in fn]
                nr_step_files = len(step_files)
                restart_condition = nr_step_files
                if restart_condition > 0:
                    subprocess.call('rm *step*', shell=True)
            
            file_list = os.listdir()
            if gro_file_2 in file_list:
                placement_check = 0
            else:
                all_atoms.positions = backup_pos
                                  
        # The old .gro file is saved under a new (unique) name
        
        fm.name_generator(gro_file, shock)
        
        new_coord = fm.gro_to_np(gro_file_2)
        u.select_atoms('all').positions = new_coord
               
        # =====================================================================
        # Renaming, saving and deleting files
        # =====================================================================
                
        # renaming storing tpr file
        fm.name_generator(tpr_file, shock)
                               
        # making and saving an .xtc file
        fm.xtc_maker(all_atoms, shock, 'only_lipids_temp.gro')
        subprocess.call('mv *.xtc shockfiles', shell=True)
                
        # Save one gro file of the vesicle only
        if shock == 0:
            all_atoms.write('vesicle_shock.gro')
            subprocess.call('mv vesicle_shock.gro shockfiles', shell=True)
        
        # Removing all backups and log files
        subprocess.call('rm *#', shell=True)
        subprocess.call('rm md.log', shell=True)
            
        # =====================================================================
        # Vesicle data acquisition
        # =====================================================================
                    
        # Calculating the volume and surface area and writing to file
        if args.vesdata == 'yes':
            if shock ==0:
                with open('vesicle_data.txt', 'a') as data:
                    data.write('{0:10} {1:20} {2:20} {3:20} {4:20} {5:20}'.format('Shock nr', 
                        'inner area (nm^2)', 'outer area (nm^2)',
                        'volume (nm^3)', 'inner_conc (mol/L)', 'outer_conc (mol/L)'))
                    data.write('\n')
                    data.write('-'*110)
                    data.write('\n')
                    
            selection = 'name ' + args.cloudpoints
            broken_system = VolArea(membrane, box_dimensions, selection)
            vol_area = broken_system.volume_area()
            
            if args.ions == 'yes':
                concentration_system = IonConcentration(bin_size_a, box_dimensions, water_clusters)
                ions_pos = ip.ag_finder(args.ions_name, atom_groups).positions
                ion_bins = concentration_system.bin_converter_i(ions_pos)
                nr_ions = concentration_system.ion_counter(ion_bins)
                inner_ions = nr_ions[0]
                outer_ions = nr_ions[1]
                inner_conc = vd.concentration(vol_area[2], inner_ions)
                outer_conc = vd.concentration(vol_area[3], outer_ions)
            else:
                inner_conc = 0
                outer_conc = 0
            
            with open('vesicle_data.txt', 'a') as data:
                
                data.write('{0:<10d} {1:<20.2f} {2:<20.2f} {3:<20.2f} {4:<20.5f} {5:<20.5f}'.format(shock, 
                    vol_area[0], vol_area[1], vol_area[2], inner_conc, outer_conc))
                data.write('\n')
                                         
    # =========================================================================
    # Steady state simulation
    # =========================================================================
    
    if args.steadystate == 'yes':
        
        fm.mdp_value_changer(mdp_file, 'new.mdp', 'nsteps', args.nr_steadystate)
        
        grompp = '{} grompp -f {} -c {} -p {} -o {}'
        grompp_command = grompp.format(args.gromacs, mdp_file, gro_file, topology_file, tpr_file)
        
        mdrun = '{} mdrun -s {} -v -x {} -c {}'
        mdrun_command = mdrun.format(args.gromacs, tpr_file, xtc_file, gro_file_2)
        
        subprocess.call(grompp_command, shell=True)
        subprocess.call(mdrun_command, shell=True)
                    
    # =========================================================================
    # Post processing
    # =========================================================================
                  
    # Concatenating the xtc files
    concatcommand = 'gmx trjcat -cat -f shockfiles/*.xtc -o shockfiles/vesicle_shock.xtc'
    subprocess.call(concatcommand, shell=True)
    subprocess.call('rm shockfiles/*t.xtc', shell=True)
  
if __name__ == '__main__':
    main()
